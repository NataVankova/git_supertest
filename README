Тестовый проект для изучения git
создан при помощи git init
добавляем README в репозиторий git add README
после создания мы делаем commit с изменениями в репозитории git commit
смотрим commit в логе git log
перед каждым commit нужно указывать какие файлы отслеживаются (git add файл)
оттачиваем мастерство commit - пишем commit message в командной строке git commit -m 'commit message без восклицательного знака'

git diff - показывает изменения между commit
git diff b81634817d1bf0035773308afc48ff407cc0114f

изменили настройки git, чтобы он выводил в цвете
git config --global --add color.ui true

писать git add каждый раз не удобно, существует команда для случая, когда нет новых файлов
git commit -a -m "commit message"

или короче - скомбинировать -a и -m options
git commit -am "commit message"

попробуем git checkout для перемещения по истории
git checkout b81634817d1bf0035773308afc48ff407cc0114f

git checkout master - возвращает на последний commit master branch

git branch - просматриваем список веток

создаем ветку branch_1 - git branch branch_1

git status показывает состояние (наличие новых файлов, файлы с изменениями подлежащие commit)

Если во время работы необходимо сохранить незакомиченные изменения, выполняем git stash
git stash - добавляет текущие незакомиченые изменения в список stash изменений.
git stash list - показывает список изменений
git stash apply - применяет последнее изменение из списка к текущей рабочей копии.
git stash pop - применяет последнее изменение из списка к текущей рабочей копии и удаляет его из списка.

ПЛАН ДАЛЬНЕЙШЕГО ОБУЧЕНИЯ:
stash - самостоятельно!!!
remote - удаленные репозитории
pull, push - взаимодействие с удаленными репозиториями
clone - работа с существующими репозиториями
настройки редактора


